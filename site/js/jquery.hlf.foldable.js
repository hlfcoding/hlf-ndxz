// Generated by CoffeeScript 1.6.2
/*
HLF Foldable jQuery Plugin v1.1
Released under the MIT License
Written with jQuery 1.7.2
*/


(function() {
  var $, Foldable, Foldables, ns;

  $ = jQuery;

  ns = $.hlf;

  /*
  Foldable
  --------
  */


  ns.foldable = {
    toString: function(context) {
      switch (context) {
        case 'event':
          return '.hlf.foldable';
        case 'data':
          return 'hlfFoldable';
        case 'class':
          return 'js-foldable';
        default:
          return 'hlf.foldable';
      }
    },
    defaults: (function(pre) {
      return {
        cls: (function() {
          var cls;

          cls = {};
          _.each(['trigger', 'expanded', 'collapsed', 'head', 'item', 'active', 'disabled'], function(key) {
            return cls[key] = "" + pre + key;
          });
          return cls;
        })(),
        slr: function(name) {
          return "." + this.cls[name];
        },
        trigger: {
          tpl: _.template("<a href=\"#\" title=\"{{label}}\">{{icon}}</a>"),
          icon: {
            expanded: '&ndash;',
            collapsed: '+'
          },
          label: {
            expanded: 'show featured',
            collapsed: 'show all'
          }
        },
        initialState: 'collapsed',
        togglebleFilter: function(idx) {
          return true;
        }
      };
    })('js-fold-')
  };

  /*
  Foldables
  ---------
  */


  ns.foldables = {
    toString: function(context) {
      switch (context) {
        case 'event':
          return '.hlf.foldables';
        case 'data':
          return 'hlfFoldables';
        case 'class':
          return 'js-foldables';
        default:
          return 'hlf.foldables';
      }
    },
    defaults: (function(pre) {
      return {
        /*
        Options for `$.fn.foldable` can be included in the `foldable` wrapper.
        They will be passed through and applied to all instances.
        */

        foldable: {},
        autoCollapse: false,
        cls: {
          menu: "" + pre + "menu"
        },
        slr: function(name) {
          return "." + this.cls[name];
        },
        toFeature: {
          baseNum: 2,
          customNums: null
        }
      };
    })('js-folds-')
  };

  /*
  Foldable API
  ------------
  */


  Foldable = (function() {
    function Foldable($el, o) {
      var expand,
        _this = this;

      this.$el = $el;
      this.o = o;
      this.$head = this.$el.find(this.o.slr('head'));
      this.$trigger = this.$head.find(this.o.slr('trigger'));
      this.$items = this.$el.find(this.o.slr('item'));
      expand = this.o.initialState === 'expanded';
      (function(o) {
        var html, type;

        if (!_this.$trigger.length) {
          type = expand ? 'expanded' : 'collapsed';
          html = o.tpl({
            label: o.label[type],
            icon: o.icon[type]
          });
          _this.$trigger = $(html).addClass(_this.o.cls.trigger).appendTo(_this.$head).on('click', function(evt) {
            return evt.preventDefault();
          });
        }
        return _this.$el.on(_this._evt('click'), "" + (_this.o.slr('trigger')) + ":not(" + (_this.o.slr('disabled')) + ")", function(evt) {
          var proceed;

          evt.preventDefault();
          proceed = _this.toggleExpanded();
          if (!proceed) {
            return;
          }
          return _this.updateTrigger();
        });
      })(this.o.trigger);
      this.toggleExpanded(expand);
    }

    Foldable.prototype.editOptions = function(options) {
      var deep;

      return $.extend((deep = true), this.o, options);
    };

    Foldable.prototype.toggleExpanded = function(expand, silent, force) {
      var proceed;

      if (silent == null) {
        silent = false;
      }
      if (force == null) {
        force = false;
      }
      if (expand == null) {
        expand = this.expanded != null ? !this.expanded : this.$el.hasClass("" + this.o.cls.collapsed);
      }
      this.$el.toggleClass(this.o.cls.expanded, expand).toggleClass(this.o.cls.collapsed, !expand);
      if (silent === false) {
        this.$el.trigger(this._evt('fold'), [expand]);
      }
      proceed = this.toggleVisibleItems(expand, force);
      this.$el.add(this.$trigger).toggleClass(this.o.cls.disabled, !proceed);
      if (!proceed) {
        return false;
      }
      this.expanded = expand;
      if (silent === true) {
        this.updateTrigger();
      }
      return true;
    };

    Foldable.prototype.toggleVisibleItems = function(visible, force) {
      if (force == null) {
        force = false;
      }
      if (this.$el.is(this.o.slr('active')) && force === false) {
        return false;
      }
      this.$items.filter(this.o.togglebleFilter).toggle(visible);
      return true;
    };

    Foldable.prototype.updateTrigger = function() {
      var _this = this;

      return (function(o) {
        var type;

        type = _this.expanded ? 'expanded' : 'collapsed';
        return _this.$trigger.html(o.icon[type]).attr('title', o.label[type]);
      })(this.o.trigger);
    };

    return Foldable;

  })();

  /*
  Foldables API
  -------------
  */


  Foldables = (function() {
    function Foldables($el, o) {
      var toFeature, _ref;

      this.$el = $el;
      this.o = o;
      if (o.toFeature !== false) {
        toFeature = (_ref = o.toFeature.customNums) != null ? _ref : o.toFeature.baseNum;
        o.foldable.togglebleFilter = function(idx) {
          return idx >= toFeature;
        };
      }
      this.$menus = this.$el.find(o.slr('menu'));
      this.$menus.foldable(o.foldable);
      o.foldable = this.$menus.first().foldable().o;
      this.$el.on(Foldable.prototype._evt('fold'), o.slr('menu'), function(evt, expand) {
        if (o.autoCollapse === false || expand === false) {
          return;
        }
        return $(this).siblings().not(o.foldable.slr('disabled')).each(function() {
          var force, silent;

          return $(this).foldable().toggleExpanded(false, (silent = true), (force = true));
        });
      });
    }

    Foldables.prototype.editOptions = function(options) {
      var deep;

      return $.extend((deep = true), this.o, options);
    };

    return Foldables;

  })();

  $.fn.foldable = ns.createPlugin(ns.foldable, Foldable);

  $.fn.foldables = ns.createPlugin(ns.foldables, Foldables);

}).call(this);
